blueprint:
  name: Heater Control System
  description: "Automatically controls a heater based on time periods with fixed 30°C target temperature."
  domain: automation
  input:
    heater_switch:
      name: Heater On/Off Switch
      description: "Input boolean to enable/disable the heater system."
      selector:
        entity:
          domain: input_boolean
    temp_sensor:
      name: Temperature Sensor
      description: "Sensor to monitor current temperature."
      selector:
        entity:
          domain: sensor
          device_class: temperature
    heater_device:
      name: Heater Device
      description: "Climate entity to control."
      selector:
        entity:
          domain: climate
    precision_factor:
      name: Precision Factor
      description: "Input number for temperature hysteresis range (±°C)."
      selector:
        entity:
          domain: input_number
    on_peak_time:
      name: On-Peak Start Time
      description: "Input datetime for on-peak period start."
      selector:
        entity:
          domain: input_datetime
    off_peak_time:
      name: Off-Peak Start Time
      description: "Input datetime for off-peak period end."
      selector:
        entity:
          domain: input_datetime

trigger:
  - platform: time
    at: "{{ state_attr(input.on_peak_time, 'timestamp') | timestamp_custom('%H:%M:%S') }}"
  - platform: time
    at: "{{ state_attr(input.off_peak_time, 'timestamp') | timestamp_custom('%H:%M:%S') }}"
  - platform: state
    entity_id:
      - input.heater_switch
      - input.temp_sensor
  - platform: homeassistant
    event: start

action:
  - choose:
      - conditions:
          - condition: state
            entity_id: input.heater_switch
            state: "on"
          - condition: time
            after: "{{ state_attr(input.on_peak_time, 'timestamp') | timestamp_custom('%H:%M:%S') }}"
            before: "{{ state_attr(input.off_peak_time, 'timestamp') | timestamp_custom('%H:%M:%S') }}"
          - condition: template
            value_template: >
              {% set current_temp = states(input.temp_sensor) | float %}
              {{ current_temp > 30 or current_temp < (30 - states(input.precision_factor) | float) }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ states(input.temp_sensor) | float > 30 
                      and is_state(input.heater_device, 'on') }}
                sequence:
                  - service: climate.turn_off
                    target:
                      entity_id: input.heater_device
              - conditions:
                  - condition: template
                    value_template: >
                      {{ states(input.temp_sensor) | float < (30 - states(input.precision_factor) | float)
                      and is_state(input.heater_device, 'off') }}
                sequence:
                  - service: climate.turn_on
                    target:
                      entity_id: input.heater_device
                  - service: climate.set_temperature
                    data:
                      temperature: 30
                    target:
                      entity_id: input.heater_device
      - conditions:
          - condition: state
            entity_id: input.heater_switch
            state: "on"
          - condition: template
            value_template: >
              {% set current_time = now().strftime('%H:%M:%S') %}
              {{ current_time < state_attr(input.on_peak_time, 'timestamp') | timestamp_custom('%H:%M:%S')
              or current_time > state_attr(input.off_peak_time, 'timestamp') | timestamp_custom('%H:%M:%S') }}
          - condition: template
            value_template: >
              {{ states(input.temp_sensor) | float > 30 
              or states(input.temp_sensor) | float < (30 - states(input.precision_factor) | float) }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ states(input.temp_sensor) | float > 30 
                      and is_state(input.heater_device, 'on') }}
                sequence:
                  - service: climate.turn_off
                    target:
                      entity_id: input.heater_device
              - conditions:
                  - condition: template
                    value_template: >
                      {{ states(input.temp_sensor) | float < (30 - states(input.precision_factor) | float)
                      and is_state(input.heater_device, 'off') }}
                sequence:
                  - service: climate.turn_on
                    target:
                      entity_id: input.heater_device
                  - service: climate.set_temperature
                    data:
                      temperature: 30
                    target:
                      entity_id: input.heater_device
      - conditions:
          - condition: state
            entity_id: input.heater_switch
            state: "off"
        sequence:
          - service: climate.turn_off
            target:
              entity_id: input.heater_device

mode: single
