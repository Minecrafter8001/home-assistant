alias: heater control system
variables:
  heater_switch: input_boolean.heater_on_off
  temp_on_peak: input_number.temp_on_peak
  temp_off_peak: input_number.temp_off_peak
  temp_sensor: sensor.temp_sensor_temperature
  heater_device: climate.smart_convector_heater
  precision_factor: input_number.precision_factor
  on_peak_time: input_datetime.on_peak_time
  off_peak_time: input_datetime.off_peak_time
  heater_temp: input_number.heater_temp
  heater_temp_off_peak: input_number.heater_temp_off_peak
trigger:
  - platform: time
    at: "{{ states(on_peak_time) }}"
  - platform: time
    at: "{{ states(off_peak_time) }}"
  - platform: state
    entity_id:
      - "{{ heater_switch }}"
      - "{{ temp_on_peak }}"
      - "{{ temp_off_peak }}"
      - "{{ temp_sensor }}"
  - platform: homeassistant
    event: start
condition: []
action:
  - choose:
      - conditions:
          - condition: state
            entity_id: "{{ heater_switch }}"
            state: "on"
          - condition: time
            after: "{{ states(on_peak_time) }}"
            before: "{{ states(off_peak_time) }}"
          - condition: template
            value_template: >
              {% set current_temp = states(temp_sensor) | float %}
              {% set setpoint_on = states(heater_temp) | float %}
              {{ current_temp > setpoint_on or current_temp < (setpoint_on - states(precision_factor) | float) }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {% set current_temp = states(temp_sensor) | float %}
                      {% set setpoint_on = states(heater_temp) | float %}
                      {{ current_temp > setpoint_on and is_state(heater_device, 'on') }}
                sequence:
                  - service: climate.turn_off
                    data:
                      entity_id: "{{ heater_device }}"
              - conditions:
                  - condition: template
                    value_template: >
                      {% set current_temp = states(temp_sensor) | float %}
                      {% set setpoint_on = states(heater_temp) | float %}
                      {{ current_temp < (setpoint_on - states(precision_factor) | float) and is_state(heater_device, 'off') }}
                sequence:
                  - service: climate.turn_on
                    data:
                      entity_id: "{{ heater_device }}"
                  - service: climate.set_temperature
                    data:
                      entity_id: "{{ heater_device }}"
                      temperature: 30
      - conditions:
          - condition: state
            entity_id: "{{ heater_switch }}"
            state: "on"
          - condition: template
            value_template: >
              {% set current_time = now().strftime('%H:%M:%S') %}
              {% set on_time = states(on_peak_time) %}
              {% set off_time = states(off_peak_time) %}
              {{ current_time < on_time or current_time > off_time }}
          - condition: template
            value_template: >
              {% set current_temp = states(temp_sensor) | float %}
              {% set setpoint_off = states(heater_temp_off_peak) | float %}
              {{ current_temp > setpoint_off or current_temp < (setpoint_off - states(precision_factor) | float) }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {% set current_temp = states(temp_sensor) | float %}
                      {% set setpoint_off = states(heater_temp_off_peak) | float %}
                      {{ current_temp > setpoint_off and is_state(heater_device, 'on') }}
                sequence:
                  - service: climate.turn_off
                    data:
                      entity_id: "{{ heater_device }}"
              - conditions:
                  - condition: template
                    value_template: >
                      {% set current_temp = states(temp_sensor) | float %}
                      {% set setpoint_off = states(heater_temp_off_peak) | float %}
                      {{ current_temp < (setpoint_off - states(precision_factor) | float) and is_state(heater_device, 'off') }}
                sequence:
                  - service: climate.turn_on
                    data:
                      entity_id: "{{ heater_device }}"
                  - service: climate.set_temperature
                    data:
                      entity_id: "{{ heater_device }}"
                      temperature: 30
      - conditions:
          - condition: state
            entity_id: "{{ heater_switch }}"
            state: "off"
        sequence:
          - service: climate.turn_off
            data:
              entity_id: "{{ heater_device }}"
mode: single
